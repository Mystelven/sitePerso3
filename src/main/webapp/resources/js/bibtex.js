var bibtex={}
bibtex.error=function(html){return"<div class=\"bibtexError\">"+html+"</div>"}
bibtex.debug=function(str){document.write(bibtex.error(str));}
bibtex.inspect=function(obj){for(i in obj)bibtex.debug(i)}
bibtex.trim1=function(str){var pattern=/^\s*(\S.*\S)\s*$/;var a=pattern.exec(str);var result=str;if(a)result=a[1];return result;}
bibtex.trim=function(str){function trim2(str){str=str.replace(/{/g,"");str=str.replace(/}/g,"");str=str.replace(/\s+/g," ");var pattern=/^.*\"(.*)\".*$/;var a=pattern.exec(str);var result=str;if(a)result=a[1];return result;}return trim2(bibtex.trim1(str));}
function BibTexEntry(text){if(!text)throw("BibTexEntry: empty text");this.text=text;var i=text.indexOf('{');if(i==-1)throw("BibTexEntry: no { delimiter");var j=text.lastIndexOf('}');if(j==-1)throw("BibTexEntry: no } delimiter");this.type=text.slice(1,i);var inner=text.slice(i+1,j);var pairs=inner.split(',');this.key=pairs[0];if(!this.key)throw("BibTexEntry: no key");this.nrPairs=pairs.length;for(var k in pairs){if(k==0)continue;var pair=pairs[k];if(pair.length>2){var keyvalue=pair.split('=');if(keyvalue.length<2)throw("BibTexEntry: invalid key-value pair: ["+pair+"]");if(keyvalue.length==3)keyvalue[1]=keyvalue[1].concat("=",keyvalue[2]);if(keyvalue.length>3)throw("BibTexEntry: invalid key-value pair: ["+pair+"]");var key=bibtex.trim(keyvalue[0]).toLowerCase();var val=bibtex.trim(keyvalue[1]);this[key]=val;}else{this.nrPairs=this.nrPairs-1;}}switch(this.type){case"Person":if(!this.name)throw"BibTexEntry: Person has no name";break;}}BibTexEntry.prototype.toString=function(){return this.text}
BibTexEntry.prototype.toList=function(){var string="<ul>";string+="<li>type : "+this.type;string+="<li>key  : "+this.key;string+="<li>author : "+this.author;string+="<li>year   : "+this.year;string+="<li>title  : "+this.title;switch(this.type){case"Article":string+="<li>journal : "+this.journal;break;case"InProceedings":case"InCollection":string+="<li>booktitle : "+this.booktitle;break;case"TechReport":string+="<li>institution : "+this.institution;string+="<li>number      : "+this.number;break;}return string+"</ul>";}
BibTexEntry.prototype.render=function(database){var string="<span class="+this.type+">";function expand(author){author=bibtex.trim1(author);if(!database)string+=span("author",author);else{var key=database.lookupPerson(author);if(!key)string+=span("author",author);else
string+=database.entry(key).render();}}function span(id,str){return"<span class=\""+id+"\">"+str+"</span>"}function link(cls,url,text){return"<a class=\""+cls+"\" href="+url+">"+text+"</a>"}function renderTitleAuthors(entry){if(entry.url)string+=link("title",entry.url,entry.title);else
string+=span("title",entry.title);string+=", ";var authors=entry.author.split(" and ");var nrAuthors=authors.length;expand(authors[0]);if(nrAuthors==2){string+=" and ";expand(authors[1]);}else{for(var i=1;i<nrAuthors;i++){if(i==nrAuthors-1){string+=", and "}else{string+=", "}expand(authors[i])}}};function lookup(entry,database,field){var value=entry[field];try{var entry=database.entry(value);str=entry.name;if(entry.url)string+=", "+link(field,entry.url,str);else
string+=", "+span(field,str);}catch(err){string+=", "+span(field,value);}}switch(this.type){case"Person":var str;if(this.url)str=link("author",this.url,this.name);else
str=span("author",this.name);string+="<span id=\""+this.key+"\">"+str+"</span>";break;case"Article":string+=span("label label-info year",this.year)+" ";renderTitleAuthors(this);lookup(this,database,"journal");break;case"InProceedings":case"InCollection":string+=span("label label-info year",this.year)+" ";renderTitleAuthors(this);lookup(this,database,"booktitle");break;case"TechReport":string+=span("label label-info year",this.year)+" ";renderTitleAuthors(this);lookup(this,database,"institution");break;}return string+"</span>";}
function Database(strings){this.nrEntries=0;this.entries={};this.person={};for(var i in strings){var text=strings[i];if(text){try{var entry=new BibTexEntry('@'+text);this.entries[entry.key]=entry;this.nrEntries++;if(entry.type=="Person")this.person[entry.name]=entry.key;}catch(err){bibtex.debug(err)}}}}function DatabaseFromString(str){var strings=str.split('@');return new Database(strings);}Database.prototype.entry=function(key){var entry=this.entries[key];if(entry)return entry;else throw"Database.entry: unknown BibTex key: "+key}
Database.prototype.lookupPerson=function(name){return this.person[name];}
Database.prototype.render=function(key){var entry=this.entry(key);return entry.render(this)}
function reverseChronological(d){return function(a,b){var x=d.entry(a).year;var y=d.entry(b).year;return((x>y)?-1:((x<y)?1:0));}}Database.prototype.search=function(regex,fieldName,keys,compare){if(!fieldName)fieldName="text";fieldName=fieldName.toLowerCase();var result=[];if(!keys){keys=[];for(var key in this.entries){keys[keys.length]=key;}}for(var i in keys){var key_i=keys[i];var entry=this.entry(key_i);try{var field=entry[fieldName];if(field.search(regex)!=-1)result[result.length]=entry.key;}catch(err){}}if(compare)return result.sort(compare(this));else return result.sort(reverseChronological(this));}
Database.prototype.searchQuery=function(query,keys){if(!query)throw"Database.searchQuery: empty search string";var parts=query.split(':');var field,regex;switch(parts.length){case 1:field="text";regex=new RegExp(parts[0],"m");break;case 2:field=bibtex.trim1(parts[0]);try{regex=new RegExp(parts[1],"m");}catch(err){regex=new RegExp(parts[1]);}break;otherwise:throw"Database.searchQuery: malformed query";}return this.search(regex,field,keys);}
Database.prototype.search3=function(str){if(!str)throw"Database.search3: empty search string";var queries=str.split(' ');var keys;for(var i in queries){keys=this.searchQuery(queries[i],keys);}return keys;}
Database.prototype.keysToList=function(keys){var string="";for(var i in keys){try{string+="<li>"+this.render(keys[i])+"</li>";}catch(err){string+="<li>"+bibtex.error("Entry \""+keys[i]+"\": "+err)+"</li>";}}return string}
Database.prototype.keysToUL=function(keys){return"<UL>\n"+this.keysToList(keys)+"</UL\n"}
function getTagText(node){if(node.textContent)return node.textContent;else if(node.innerText)return node.innerText;else if(node.childNodes[0])return node.childNodes[0].nodeValue;else
throw"browser not supported";}function setTagHTML(node,html){if(node.innerHTML)return node.innerHTML=html;else
throw"browser not supported";}var DatabaseFromDocument=function(){var element=document.getElementById("bibtex");return DatabaseFromString(getTagText(element));}
Database.prototype.replacePubs=function(){var tags=document.getElementsByName("pub");for(var i=0;i<tags.length;i++){var element=tags[i];setTagHTML(element,this.render(getTagText(tags[i])));}}
Database.prototype.searchToUL=function(regex,field){document.write(this.keysToUL(this.search(regex,field)));}
var debug=false;Database.prototype.replaceSearches=function(){var tags=document.getElementsByName("search");for(var i=0;i<tags.length;i++){var element=tags[i];var str=getTagText(element);try{if(!str)throw"no search string";var keys=this.search3(str);if(keys.length==0)throw"no matches";if(debug)element.textContent=this.keysToList(keys);else setTagHTML(element,this.keysToList(keys));}catch(err){setTagHTML(element,bibtex.error("Search \""+str+"\": "+err));}}}
var xmlhttp;function getHTTP(url,callback){if(window.XMLHttpRequest){xmlhttp=new XMLHttpRequest();xmlhttp.onreadystatechange=callback;xmlhttp.open("GET",url,true);xmlhttp.send(null);}else if(window.ActiveXObject){xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");if(!xmlhttp)throw"Could not access ActiveX object";xmlhttp.onreadystatechange=callback;xmlhttp.open("GET",url,true);xmlhttp.send();}else throw"Browser does not support reading files";}function alertContents(){if(xmlhttp.readyState==4){var str=xmlhttp.responseText;var database=DatabaseFromString(str);database.replacePubs();database.replaceSearches();}}function load(url){try{getHTTP(url,alertContents);}catch(err){bibtex.error("There seemed to have been an error loading the bibtex file:<br>"+err);}}